#!Nsis Installer Command Script
#
# The following external defines are recognized:
# ${VERSION} = YYYYMMDD
# ${BIT}     = 32 or 64
# ${LIBGCC}  = name of libgcc dll file to use
# ${MINGW}   = <path to mingw windows dlls>

!include "LogicLib.nsh"
!include "EnvVarUpdate.nsh"
!include "x64.nsh"

RequestExecutionLevel admin

!macro VerifyUserIsAdmin
UserInfo::GetAccountType
pop $0
${If} $0 != "admin"
  messageBox mb_iconstop "Administrator rights required!"
  setErrorLevel 740 ;ERROR_ELEVATION_REQUIRED
  quit
${EndIf}
!macroend

!macro CreateInternetShortcut FILENAME URL ICONFILE ICONINDEX
WriteINIStr "${FILENAME}.url" "InternetShortcut" "URL" "${URL}"
WriteINIStr "${FILENAME}.url" "InternetShortcut" "IconFile" "${ICONFILE}"
WriteINIStr "${FILENAME}.url" "InternetShortcut" "IconIndex" "${ICONINDEX}"
!macroend

!ifndef LIBGCC
!define LIBGCC libgcc_s_dw2-1.dll
!endif

!define LAMMPS "LAMMPS ${BIT}-bit ${VERSION}"
OutFile "../LAMMPS-${BIT}bit-${VERSION}.exe"

Name "${LAMMPS}"
!if ${BIT} == 64
InstallDir "$ProgramFiles64\${LAMMPS}"
!define MPICHDIR "$ProgramFiles64\MPICH2\bin"
!else
InstallDir "$ProgramFiles\${LAMMPS}"
!define MPICHDIR "$ProgramFiles\MPICH2\bin"
!endif

XPStyle on
ShowInstDetails show
ShowUninstDetails show
SetCompressor lzma

Page directory
Page instfiles

DirText "Please select the LAMMPS installation folder."

function .onInit
  setShellVarContext all
!insertmacro VerifyUserIsAdmin
functionEnd

Section "${LAMMPS}"
  SectionIn RO
  SetRegView ${BIT}

  CreateDirectory "$SMPROGRAMS\${LAMMPS}"
  CreateShortCut  "$SMPROGRAMS\${LAMMPS}\Uninstall.lnk"      "$INSTDIR\Uninstall.exe"          "" ""
  CreateShortCut  "$SMPROGRAMS\${LAMMPS}\README.lnk"         "$INSTDIR\README.txt"             "" ""
  CreateShortCut  "$SMPROGRAMS\${LAMMPS}\LAMMPS Manual.lnk"  "$INSTDIR\doc\LAMMPS-Manual.pdf"  "" ""
  CreateShortCut  "$SMPROGRAMS\${LAMMPS}\Manuals.lnk"        "$WINDIR\explorer.exe"  \
                                                     '/e,"$INSTDIR\Doc"'  ""
  CreateShortCut  "$SMPROGRAMS\${LAMMPS}\Benchmarks.lnk"     "$WINDIR\explorer.exe"  \
                                                     '/e,"$INSTDIR\Benchmarks"'  ""
  CreateShortCut  "$SMPROGRAMS\${LAMMPS}\Examples.lnk"       "$WINDIR\explorer.exe"    \
                                                     '/e,"$INSTDIR\Examples"'    ""
  CreateShortCut  "$SMPROGRAMS\${LAMMPS}\LICENSE.lnk"        "$INSTDIR\LICENSE.txt"            "" ""

!insertmacro CreateInternetShortcut "$SMPROGRAMS\${LAMMPS}\LAMMPS WWW Site" \
                  "http://lammps.sandia.gov" "" "0"
!insertmacro CreateInternetShortcut "$SMPROGRAMS\${LAMMPS}\LAMMPS Commands" \
                  "http://lammps.sandia.gov/doc/Commands_all.html" "" "0"

  SetOutPath "$INSTDIR"
  CreateDirectory "$INSTDIR\bin"
  CreateDirectory "$INSTDIR\Doc"
  CreateDirectory "$INSTDIR\Benchmarks"
  CreateDirectory "$INSTDIR\Examples"
  CreateDirectory "$INSTDIR\Potentials"
  CreateDirectory "$INSTDIR\frc_files"

  File /oname=License.txt lammps-${LMPREV}/LICENSE
  File /oname=README.txt  lammps-${LMPREV}/README

  SetOutPath "$INSTDIR\bin"
  File ${MINGW}/${LIBGCC}

  File *.exe
  File *.dll

  SetOutPath "$INSTDIR\Doc"
  File *.pdf

  SetOutPath "$INSTDIR\Potentials"
  File potentials/*

  SetOutPath "$INSTDIR\Examples"
  File /r /x log.*.4 examples/*

  SetOutPath "$INSTDIR\frc_files"
  File /oname=README-msi2lmp.txt tools/msi2lmp/README.txt
  File /r tools/msi2lmp/frc_files/*

  SetOutPath "$INSTDIR\Benchmarks"
  File /r /x log.*.4 bench/*

  SetOutPath "$INSTDIR\Python"
  File /r /x __pycache__ python/*

  # add MPICH2 path
  Push "${MPICHDIR}"
  Call AddToPath
  #${EnvVarUpdate} $0 "PATH"              "A" "HKLM" "${MPICHDIR}"

  Push "$INSTDIR\bin"
  Call AddToPath
  #${EnvVarUpdate} $0 "PATH"              "A" "HKLM" "$INSTDIR\bin"

  ${EnvVarUpdate} $0 "LAMMPS_POTENTIALS" "A" "HKLM" "$INSTDIR\Potentials"
  ${EnvVarUpdate} $0 "MSI2LMP_LIBRARY"    "A" "HKLM" "$INSTDIR\frc_files"
SectionEnd

function un.onInit
  SetShellVarContext all
!insertmacro VerifyUserIsAdmin
functionEnd

Section "Uninstall"
  SetRegView ${BIT}

  # only remove MPICH2 path, if uninstalling parallel package
  Push "${MPICHDIR}"
  Call un.RemoveFromPath
  #${un.EnvVarUpdate} $0 "PATH"              "R" "HKLM" "${MPICHDIR}"

  Push "$INSTDIR\bin"
  Call un.RemoveFromPath
  #${un.EnvVarUpdate} $0 "PATH"              "R" "HKLM" "$INSTDIR\bin"

  ${un.EnvVarUpdate} $0 "LAMMPS_POTENTIALS" "R" "HKLM" "$INSTDIR\Potentials"
  ${un.EnvVarUpdate} $0 "MSI2LMP_LIBRARY"    "R" "HKLM" "$INSTDIR\frc_files"

  RMDir /r "$SMPROGRAMS\${LAMMPS}"

  Delete /REBOOTOK   "$INSTDIR\*.txt"
  Delete /REBOOTOK   "$INSTDIR\Uninstall.exe"
  RMDir /r /REBOOTOK "$INSTDIR\bin"
  RMDir /r /REBOOTOK "$INSTDIR\Benchmarks"
  RMDir /r /REBOOTOK "$INSTDIR\Doc"
  RMDir /r /REBOOTOK "$INSTDIR\Examples"
  RMDir /r /REBOOTOK "$INSTDIR\Potentials"
  RMDir /r /REBOOTOK "$INSTDIR\Python"
  RMDir /r /REBOOTOK "$INSTDIR\frc_files"
  RMDir /REBOOTOK "$INSTDIR"
SectionEnd

Section -post
  SetRegView ${BIT}
  WriteUninstaller "$INSTDIR\Uninstall.exe"
SectionEnd

;--------------------------------------------------------------------
; Path functions
;
; Based on example from:
; http://nsis.sourceforge.net/Path_Manipulation
;

!include "WinMessages.nsh"

; Registry Entry for environment (NT4,2000,XP)
; All users:
;!define Environ 'HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"'
; Current user only:
!define Environ 'HKCU "Environment"'


; AddToPath - Appends dir to PATH
;   (does not work on Win9x/ME)
;
; Usage:
;   Push "dir"
;   Call AddToPath

Function AddToPath
  Exch $0
  Push $1
  Push $2
  Push $3
  Push $4

  ; NSIS ReadRegStr returns empty string on string overflow
  ; Native calls are used here to check actual length of PATH

  ; $4 = RegOpenKey(HKEY_CURRENT_USER, "Environment", &$3)
  System::Call "advapi32::RegOpenKey(i 0x80000001, t'Environment', *i.r3) i.r4"
  IntCmp $4 0 0 done done
  ; $4 = RegQueryValueEx($3, "PATH", (DWORD*)0, (DWORD*)0, &$1, ($2=NSIS_MAX_STRLEN, &$2))
  ; RegCloseKey($3)
  System::Call "advapi32::RegQueryValueEx(i $3, t'PATH', i 0, i 0, t.r1, *i ${NSIS_MAX_STRLEN} r2) i.r4"
  System::Call "advapi32::RegCloseKey(i $3)"

  IntCmp $4 234 0 +4 +4 ; $4 == ERROR_MORE_DATA
    DetailPrint "AddToPath: original length $2 > ${NSIS_MAX_STRLEN}"
    MessageBox MB_OK "PATH not updated, original length $2 > ${NSIS_MAX_STRLEN}"
    Goto done

  IntCmp $4 0 +5 ; $4 != NO_ERROR
    IntCmp $4 2 +3 ; $4 != ERROR_FILE_NOT_FOUND
      DetailPrint "AddToPath: unexpected error code $4"
      Goto done
    StrCpy $1 ""

  ; Check if already in PATH
  Push "$1;"
  Push "$0;"
  Call MyStrStr
  Pop $2
  StrCmp $2 "" 0 done
  Push "$1;"
  Push "$0\;"
  Call MyStrStr
  Pop $2
  StrCmp $2 "" 0 done

  ; Prevent NSIS string overflow
  StrLen $2 $0
  StrLen $3 $1
  IntOp $2 $2 + $3
  IntOp $2 $2 + 2 ; $2 = strlen(dir) + strlen(PATH) + sizeof(";")
  IntCmp $2 ${NSIS_MAX_STRLEN} +4 +4 0
    DetailPrint "AddToPath: new length $2 > ${NSIS_MAX_STRLEN}"
    MessageBox MB_OK "PATH not updated, new length $2 > ${NSIS_MAX_STRLEN}."
    Goto done

  ; Append dir to PATH
  DetailPrint "Add to PATH: $0"
  StrCpy $2 $1 1 -1
  StrCmp $2 ";" 0 +2
    StrCpy $1 $1 -1 ; remove trailing ';'
  StrCmp $1 "" +2   ; no leading ';'
    StrCpy $0 "$1;$0"
  WriteRegExpandStr ${Environ} "PATH" $0
  SendMessage ${HWND_BROADCAST} ${WM_WININICHANGE} 0 "STR:Environment" /TIMEOUT=5000

done:
  Pop $4
  Pop $3
  Pop $2
  Pop $1
  Pop $0
FunctionEnd


; RemoveFromPath - Removes dir from PATH
;
; Usage:
;   Push "dir"
;   Call RemoveFromPath

Function un.RemoveFromPath
  Exch $0
  Push $1
  Push $2
  Push $3
  Push $4
  Push $5
  Push $6

  ReadRegStr $1 ${Environ} "PATH"
  StrCpy $5 $1 1 -1
  StrCmp $5 ";" +2
    StrCpy $1 "$1;" ; ensure trailing ';'
  Push $1
  Push "$0;"
  Call un.MyStrStr
  Pop $2 ; pos of our dir
  StrCmp $2 "" done

  DetailPrint "Remove from PATH: $0"
  StrLen $3 "$0;"
  StrLen $4 $2
  StrCpy $5 $1 -$4 ; $5 is now the part before the path to remove
  StrCpy $6 $2 "" $3 ; $6 is now the part after the path to remove
  StrCpy $3 "$5$6"
  StrCpy $5 $3 1 -1
  StrCmp $5 ";" 0 +2
  StrCpy $3 $3 -1 ; remove trailing ';'
  WriteRegExpandStr ${Environ} "PATH" $3
  SendMessage ${HWND_BROADCAST} ${WM_WININICHANGE} 0 "STR:Environment" /TIMEOUT=5000

done:
  Pop $6
  Pop $5
  Pop $4
  Pop $3
  Pop $2
  Pop $1
  Pop $0
FunctionEnd


; MyStrStr - find substring in a string
;
; Usage:
;   Push "this is some string"
;   Push "some"
;   Call MyStrStr
;   Pop $0 ; "some string"

!macro MyStrStr un
Function ${un}MyStrStr
  Exch $R1 ; $R1=substring, stack=[old$R1,string,...]
  Exch     ;                stack=[string,old$R1,...]
  Exch $R2 ; $R2=string,    stack=[old$R2,old$R1,...]
  Push $R3
  Push $R4
  Push $R5
  StrLen $R3 $R1
  StrCpy $R4 0
  ; $R1=substring, $R2=string, $R3=strlen(substring)
  ; $R4=count, $R5=tmp
  loop:
    StrCpy $R5 $R2 $R3 $R4
    StrCmp $R5 $R1 done
    StrCmp $R5 "" done
    IntOp $R4 $R4 + 1
    Goto loop
done:
  StrCpy $R1 $R2 "" $R4
  Pop $R5
  Pop $R4
  Pop $R3
  Pop $R2
  Exch $R1 ; $R1=old$R1, stack=[result,...]
FunctionEnd
!macroend
!insertmacro MyStrStr ""
!insertmacro MyStrStr "un."

# Local Variables:
# mode: sh
# End:
